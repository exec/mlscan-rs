name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build for ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: portscan-linux-x86_64
            
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: portscan-linux-x86_64-musl
            
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: portscan-linux-aarch64
            
          - target: x86_64-apple-darwin
            os: macos-latest
            name: portscan-macos-x86_64
            
          - target: aarch64-apple-darwin
            os: macos-latest
            name: portscan-macos-aarch64
            
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: portscan-windows-x86_64
            ext: .exe
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install cross-compilation tools
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu musl-tools
        
    - name: Configure cross-compilation
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
        echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml
        
    - name: Build binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        if [[ "${{ matrix.target }}" == *"musl"* ]]; then
          cargo build --release --target ${{ matrix.target }} --no-default-features
        else
          cargo build --release --target ${{ matrix.target }}
        fi
        
    - name: Build binary (Windows)
      if: matrix.os == 'windows-latest'
      run: cargo build --release --target ${{ matrix.target }}
        
    - name: Package binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        tar -czf ${{ matrix.name }}.tar.gz portscan
        
    - name: Package binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cd target/${{ matrix.target }}/release
        7z a ${{ matrix.name }}.zip portscan.exe
        
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: |
          target/${{ matrix.target }}/release/${{ matrix.name }}.tar.gz
          target/${{ matrix.target }}/release/${{ matrix.name }}.zip

  build-deb:
    name: Build Debian Package
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install cargo-deb
      run: cargo install cargo-deb
      
    - name: Build Debian package
      run: cargo deb
      
    - name: Upload Debian package
      uses: actions/upload-artifact@v4
      with:
        name: debian-package
        path: target/debian/*.deb

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, build-deb]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/**/*.tar.gz
          artifacts/**/*.zip
          artifacts/**/*.deb
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}